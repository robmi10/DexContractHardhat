{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pooladdress",
          "type": "address"
        }
      ],
      "name": "poolAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_useraddress",
          "type": "address"
        }
      ],
      "name": "userAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "userMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userNumber",
          "type": "uint256"
        }
      ],
      "name": "userNumber",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolMapping",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_removeLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_swapEthToToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_swapTokenToEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        }
      ],
      "name": "checkPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        }
      ],
      "name": "getMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c4611e6b746e39eb341961e792c7d17c059ca52cec1017179506ada90f8e82b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1943181",
    "logsBloom": "0x
    "blockHash": "0x23029f84248c52e7a5c5916061e94a40669e9184a9be7530bfa0a1f6b9c41bcb",
    "transactionHash": "0x8c4611e6b746e39eb341961e792c7d17c059ca52cec1017179506ada90f8e82b",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1943181",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc400ba9d690a84d84ec1289cc0df098",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pooladdress\",\"type\":\"address\"}],\"name\":\"poolAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"userAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"userMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userNumber\",\"type\":\"uint256\"}],\"name\":\"userNumber\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolMapping\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_removeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_swapEthToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_swapTokenToEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"checkPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DexV3.sol\":\"DexV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DexV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract DexV3 {\\n    Pool public  pool;\\n\\n    event poolAddress (address indexed _pooladdress);\\n    event userAddress (address indexed _useraddress);\\n\\n    event userNumber (uint256 indexed _userNumber);\\n\\n    event userMessage (string indexed _message);\\n    mapping (uint256 => Pool) public PoolMapping;\\n    uint256 public counter;\\n\\n\\n     function getPoolAddress(uint256 _pool) public payable returns(address){\\n        pool = PoolMapping[_pool];\\n        emit poolAddress(address(pool));\\n        return address(pool);\\n    }\\n\\n      function getMessage(uint256 _pool) public {\\n        pool = Pool(address(PoolMapping[_pool]));\\n        uint256 message = pool.getNumber();\\n        emit userNumber(message);\\n        \\n    }\\n\\n       function checkPoolAddress(uint256 _pool) public payable returns(address){\\n        pool = PoolMapping[_pool];\\n        address getpool = pool.getAddress();\\n        emit poolAddress(getpool);\\n        return address(pool);\\n    }\\n\\n    function createPool(address liquidityToken, address tokenA) public payable {\\n        emit poolAddress(tokenA);\\n        pool = new Pool(liquidityToken, tokenA);\\n        PoolMapping[counter] = pool;\\n        counter += 1;\\n    }\\n    \\n    function _addLiquidity(uint256 _pool, uint256 _amount) public payable  {\\n        pool =  Pool(address(PoolMapping[_pool]));\\n        // tokenA.transferFrom(msg.sender, address(this), _amount);\\n        emit userAddress(address(pool));\\n        pool.addLiquidity(_amount);\\n        // pool.addLiquidity(_amount).send({from: msg.sender});\\n    }\\n\\n    function _removeLiquidity(uint256 _pool, uint256 _amount) public payable{\\n        pool = PoolMapping[_pool];\\n        pool.removeLiquidity(_amount);\\n    }\\n\\n    function _swapTokenToEth(uint256 _pool, uint256 _amount)  public payable{\\n        pool = PoolMapping[_pool];\\n        pool.swapTokenToEth(_amount);\\n    }\\n\\n     function _swapEthToToken(uint256 _pool, uint256 _amount)  public payable{\\n        pool = PoolMapping[_pool];\\n        pool.swapEthToToken(_amount);\\n    }\\n\\n}\",\"keccak256\":\"0xd71255d8e9ff01d3c286e86c3ce61cf7d7386f97c7963e70603b3ea67f2d3eee\",\"license\":\"MIT\"},\"contracts/LiquidityToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract LiquidityToken is ERC20{\\n    constructor() ERC20('Lp', 'LPToken'){\\n    }\\n}\",\"keccak256\":\"0x586b0784f71db413a973210963acc49c370c9f664b1da8327b20ef08edd06fac\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./LiquidityToken.sol\\\";\\n\\n//Skapa den h\\u00e4r kontrakten som en pool ist\\u00e4llet och den h\\u00e4r poolen har allts\\u00e5 sin egna address.\\n//Poolen ska d\\u00e4refter kunna kallas fr\\u00e5n en annan Kontrakt som ska vara sj\\u00e4lva Dex och ta hand om varje pool som exisiterar.\\n//D\\u00e4rf\\u00f6r g\\u00f6r om denna kontrakt s\\u00e5 att den \\u00e4r kopplad till eth msg.value() ist\\u00e4llet f\\u00f6r \\\"weth\\\" sen skapa den riktiga Dex \\\"manage\\\" kontrakten.\\n//I Dex kontraktet spara alla olika pools i en mapping och kalla deras funktioner med hj\\u00e4lp av en \\n\\ncontract Pool is IERC20, LiquidityToken {\\n    LiquidityToken public lpToken;\\n    address public lpTokenAddress;\\n    address public erc20TokenAddress;\\n    mapping(address => uint256) WethMapping;\\n    event tokenSwap(address indexed token, address indexed swapper, string indexed swap);\\n    event liquidityPool( uint256 indexed amount, address indexed provider);\\n    event liquidityWidthdraw( uint256 indexed _amount, address indexed _to);\\n    event addressBalance(address indexed token, uint256 indexed _amount, address indexed _address);\\n    event balanceCall( uint256 indexed _amount);\\n    event userInPoolAddress(address indexed _caller);\\n\\n    constructor(address _lpToken, address _erc20TokenAddress) {\\n        require(_lpToken != address(0));\\n        lpTokenAddress = _lpToken;\\n        erc20TokenAddress = _erc20TokenAddress;\\n    }\\n\\n    function getReserve() public payable returns(uint256) {\\n        uint256 balaceGet = IERC20(erc20TokenAddress).balanceOf(address(this));\\n        emit balanceCall(balaceGet);\\n        return balaceGet;\\n    }\\n\\n     function getEthReserve() public payable returns(uint256) {\\n        uint256 balaceGet = address(this).balance;\\n        emit balanceCall(balaceGet);\\n        return address(this).balance;\\n    }\\n\\n    function getAddress() public payable returns (address){\\n        return erc20TokenAddress;\\n    }\\n\\n     function getNumber() public payable returns (uint256){\\n        return 420;\\n    }\\n\\n    function getMessage() public payable returns (string memory){\\n        return \\\"Hejsaaaan!\\\";\\n    }\\n \\n    function addLiquidity (uint _amount) public payable{\\n        uint256 daiReserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n        emit userInPoolAddress(msg.sender);\\n        if(daiReserve == 0){\\n            IERC20(erc20TokenAddress).transferFrom(msg.sender, address(this), _amount);\\n            _mint(msg.sender, ethReserve);\\n            emit liquidityPool( _amount, msg.sender);\\n        }else{\\n        uint256 _ethReserve = address(this).balance - msg.value;\\n        uint256 acceptedLiquidityAmount = (_amount * daiReserve) / (_ethReserve);\\n        require(_amount >= acceptedLiquidityAmount, \\\"not accepted liquidity less then the minimum amount accepted\\\");\\n        IERC20(erc20TokenAddress).transferFrom(msg.sender, address(this), acceptedLiquidityAmount);\\n\\n        uint256 mintokens = (IERC20(erc20TokenAddress).totalSupply() * msg.value) / (_ethReserve);\\n        _mint(msg.sender, mintokens);\\n        emit liquidityPool( _amount, msg.sender);\\n        }\\n    }\\n    // remove liquidity\\n    function removeLiquidity(uint _amount) public {\\n        require(_amount >= 0, \\\"to little amount\\\");\\n        uint256 ethReserve = address(this).balance;\\n        uint256 totalSupply = IERC20(erc20TokenAddress).totalSupply();\\n        uint256 erc20TokenReserve = IERC20(erc20TokenAddress).balanceOf(address(this));\\n        uint256 ethBackToUser = (ethReserve * _amount) / totalSupply;\\n        uint256 ldtokenBackToUser = (erc20TokenReserve * _amount) / totalSupply;\\n        _burn(msg.sender, _amount);\\n        IERC20(erc20TokenAddress).approve(address(this), ldtokenBackToUser);\\n        IERC20(erc20TokenAddress).transferFrom(address(this), msg.sender, ldtokenBackToUser);\\n        (bool call, bytes memory data) = msg.sender.call{value: ethBackToUser}(\\\"\\\");\\n        emit liquidityWidthdraw(_amount, msg.sender);\\n    }\\n    \\n\\n    function swapEthToToken(uint256 _amount) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n\\n        require(ethReserve > 0 && erc20Reserve > 0, \\\"invalide reserve amount\\\");\\n        uint256 outputAmount = (_amount * erc20Reserve) / (_amount + ethReserve);\\n        uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n\\n        require(_amount >= totalAmountwithfee, \\\"to little amount for swapping\\\");\\n        IERC20(erc20TokenAddress).approve(address(this), totalAmountwithfee);\\n        IERC20(erc20TokenAddress).transferFrom(address(this), msg.sender, totalAmountwithfee);\\n        emit tokenSwap(erc20TokenAddress, msg.sender, \\\"eth/token\\\");\\n    }\\n\\n       function swapTokenToEth(uint256 _amount) public payable{\\n        uint256 erc20Reserve = getReserve();\\n        uint256 ethReserve = address(this).balance;\\n\\n        require(erc20Reserve > 0 && ethReserve > 0, \\\"invalide reserve amount\\\");\\n\\n        uint256 outputAmount = (_amount * ethReserve) / (_amount + erc20Reserve);\\n        uint256 totalAmountwithfee = (outputAmount * 99) / 100;\\n\\n        require(_amount >= totalAmountwithfee, \\\"to little amount for swapping\\\");\\n\\n        (bool call, bytes memory data) = msg.sender.call{value: totalAmountwithfee}(\\\"\\\");\\n\\n        emit tokenSwap(erc20TokenAddress, msg.sender, \\\"token/eth\\\");\\n    }\\n}\\n\\n\",\"keccak256\":\"0x7ef20de4d1dd623353b50c173329b85fa45d7d70733824b98144282d159a482a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612234806100206000396000f3fe60806040526004361061009b5760003560e01c80633d60cebe116100645780633d60cebe1461014e57806361bc221a1461016157806386f79edb146101855780639e8af2af146101a5578063d4117e8d146101b8578063e3433615146101cb57600080fd5b8062a5ae21146100a057806304c55b92146100d05780630b6af776146101065780631269e22f1461011b57806316f0115b1461012e575b600080fd5b6100b36100ae366004610667565b6101de565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100dc57600080fd5b506100b36100eb366004610667565b6001602052600090815260409020546001600160a01b031681565b610119610114366004610680565b610242565b005b610119610129366004610680565b6102c1565b34801561013a57600080fd5b506000546100b3906001600160a01b031681565b61011961015c366004610680565b61030e565b34801561016d57600080fd5b5061017760025481565b6040519081526020016100c7565b34801561019157600080fd5b506101196101a0366004610667565b61035b565b6101196101b3366004610680565b610425565b6100b36101c6366004610667565b6104a9565b6101196101d93660046106ba565b61058e565b6000818152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590517fe57fb80e6a08cbced7d99d8f82ae3ee3fee1e5ade0c43ec2de95588b1e3c41fd908390a250506000546001600160a01b031690565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551639c8f9f2360e01b815260048101839052639c8f9f23906024015b600060405180830381600087803b1580156102a557600080fd5b505af11580156102b9573d6000803e3d6000fd5b505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551632da618c760e21b81526004810183905263b698631c9060240161028b565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117909255516331c8bb3160e21b81526004810183905263c722ecc49060240161028b565b60008181526001602090815260408083205483546001600160a01b0319166001600160a01b0390911690811784558151631e593d9b60e31b81529151909263f2c9ecd8926004808201939182900301818787803b1580156103bb57600080fd5b505af11580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f391906106f3565b60405190915081907f63f5d9c02286e17d00c4feef100edd64e187c62eb3ce9323a27b1e0f1305883c90600090a25050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905190917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a26000546040516328e32c8560e11b8152600481018390526001600160a01b03909116906351c6590a9060240161028b565b60008181526001602090815260408083205483546001600160a01b0319166001600160a01b03909116908117845581516338cc483160e01b81529151849391926338cc483192600480830193919282900301818787803b15801561050c57600080fd5b505af1158015610520573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610544919061070c565b6040519091506001600160a01b038216907fe57fb80e6a08cbced7d99d8f82ae3ee3fee1e5ade0c43ec2de95588b1e3c41fd90600090a250506000546001600160a01b0316919050565b6040516001600160a01b038216907fe57fb80e6a08cbced7d99d8f82ae3ee3fee1e5ade0c43ec2de95588b1e3c41fd90600090a281816040516105d09061065a565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610603573d6000803e3d6000fd5b50600080546001600160a01b03929092166001600160a01b03199283168117825560028054835260016020819052604084208054909516909217909355825490929190610651908490610730565b90915550505050565b611aa88061075783390190565b60006020828403121561067957600080fd5b5035919050565b6000806040838503121561069357600080fd5b50508035926020909101359150565b6001600160a01b03811681146106b757600080fd5b50565b600080604083850312156106cd57600080fd5b82356106d8816106a2565b915060208301356106e8816106a2565b809150509250929050565b60006020828403121561070557600080fd5b5051919050565b60006020828403121561071e57600080fd5b8151610729816106a2565b9392505050565b6000821982111561075157634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b5060405162001aa838038062001aa883398101604081905262000034916200019f565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d91600391620000dc565b50805162000093906004906020840190620000dc565b5050506001600160a01b038216620000aa57600080fd5b600680546001600160a01b039384166001600160a01b0319918216179091556007805492909316911617905562000214565b828054620000ea90620001d7565b90600052602060002090601f0160209004810192826200010e576000855562000159565b82601f106200012957805160ff191683800117855562000159565b8280016001018555821562000159579182015b82811115620001595782518255916020019190600101906200013c565b50620001679291506200016b565b5090565b5b808211156200016757600081556001016200016c565b80516001600160a01b03811681146200019a57600080fd5b919050565b60008060408385031215620001b357600080fd5b620001be8362000182565b9150620001ce6020840162000182565b90509250929050565b600181811c90821680620001ec57607f821691505b602082108114156200020e57634e487b7160e01b600052602260045260246000fd5b50919050565b61188480620002246000396000f3fe6080604052600436106101405760003560e01c80638a9118c0116100b6578063c722ecc41161006f578063c722ecc414610343578063ce6d41de14610356578063dd62ed3e1461037c578063f2c9ecd81461039c578063f5ae497a146103a4578063f835cd3c146103c457600080fd5b80638a9118c0146102b357806395d89b41146102bb5780639c8f9f23146102d0578063a457c2d7146102f0578063a9059cbb14610310578063b698631c1461033057600080fd5b806338cc48311161010857806338cc4831146101fb578063395093511461022057806351c6590a1461024057806359bf5d39146102555780635fcbd2851461025d57806370a082311461027d57600080fd5b806306fdde0314610145578063095ea7b31461017057806318160ddd146101a057806323b872dd146101bf578063313ce567146101df575b600080fd5b34801561015157600080fd5b5061015a6103e4565b60405161016791906115e9565b60405180910390f35b34801561017c57600080fd5b5061019061018b36600461165a565b610476565b6040519015158152602001610167565b3480156101ac57600080fd5b506002545b604051908152602001610167565b3480156101cb57600080fd5b506101906101da366004611684565b61048e565b3480156101eb57600080fd5b5060405160128152602001610167565b6007546001600160a01b03165b6040516001600160a01b039091168152602001610167565b34801561022c57600080fd5b5061019061023b36600461165a565b6104b2565b61025361024e3660046116c0565b6104d4565b005b6101b16107de565b34801561026957600080fd5b50600554610208906001600160a01b031681565b34801561028957600080fd5b506101b16102983660046116d9565b6001600160a01b031660009081526020819052604090205490565b6101b1610891565b3480156102c757600080fd5b5061015a6108c7565b3480156102dc57600080fd5b506102536102eb3660046116c0565b6108d6565b3480156102fc57600080fd5b5061019061030b36600461165a565b610ba9565b34801561031c57600080fd5b5061019061032b36600461165a565b610c24565b61025361033e3660046116c0565b610c32565b6102536103513660046116c0565b610e89565b60408051808201909152600a81526948656a73616161616e2160b01b602082015261015a565b34801561038857600080fd5b506101b16103973660046116fb565b611025565b6101a46101b1565b3480156103b057600080fd5b50600654610208906001600160a01b031681565b3480156103d057600080fd5b50600754610208906001600160a01b031681565b6060600380546103f39061172e565b80601f016020809104026020016040519081016040528092919081815260200182805461041f9061172e565b801561046c5780601f106104415761010080835404028352916020019161046c565b820191906000526020600020905b81548152906001019060200180831161044f57829003601f168201915b5050505050905090565b600033610484818585611050565b5060019392505050565b60003361049c858285611174565b6104a78585856111ee565b506001949350505050565b6000336104848185856104c58383611025565b6104cf919061177f565b611050565b60006104de6107de565b604051909150479033907f6668ddb75ab5592129a71390d93b9b7bc29f1b921252a127cf5afc9cb55d154690600090a2816105d6576007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061054790339030908890600401611797565b602060405180830381600087803b15801561056157600080fd5b505af1158015610575573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059991906117bb565b506105a433826113bc565b604051339084907f91905d237e50daa4bdca9468a26519d7cd5d0f653a5a9488d96dd6a9e4c6a45c90600090a3505050565b60006105e234476117dd565b90506000816105f185876117f4565b6105fb9190611813565b9050808510156106785760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e742061636365707465640000000060648201526084015b60405180910390fd5b6007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906106ac90339030908690600401611797565b602060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe91906117bb565b5060008234600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190611835565b61079391906117f4565b61079d9190611813565b90506107a933826113bc565b604051339087907f91905d237e50daa4bdca9468a26519d7cd5d0f653a5a9488d96dd6a9e4c6a45c90600090a3505050505050565b6007546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190611835565b60405190915081907f9b956f76026ea895b5299c1b06e63f821ebf002029cae37d04b7a953080cbf3690600090a2919050565b604051600090479081907f9b956f76026ea895b5299c1b06e63f821ebf002029cae37d04b7a953080cbf36908490a24791505090565b6060600480546103f39061172e565b600754604080516318160ddd60e01b8152905147926000926001600160a01b03909116916318160ddd91600480820192602092909190829003018186803b15801561092057600080fd5b505afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190611835565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156109a157600080fd5b505afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611835565b90506000826109e886866117f4565b6109f29190611813565b9050600083610a0187856117f4565b610a0b9190611813565b9050610a17338761149b565b60075460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b158015610a6357600080fd5b505af1158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b91906117bb565b506007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610ad090309033908690600401611797565b602060405180830381600087803b158015610aea57600080fd5b505af1158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2291906117bb565b506040516000908190339085908381818185875af1925050503d8060008114610b67576040519150601f19603f3d011682016040523d82523d6000602084013e610b6c565b606091505b506040519193509150339089907f034a5f6e3118da9e19e2e8a906a5e497cb80b6fee61f40df91ca96bfbb71a89b90600090a35050505050505050565b60003381610bb78286611025565b905083811015610c175760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161066f565b6104a78286868403611050565b6000336104848185856111ee565b6000610c3c6107de565b9050478015801590610c4e5750600082115b610c945760405162461bcd60e51b81526020600482015260176024820152761a5b9d985b1a5919481c995cd95c9d9948185b5bdd5b9d604a1b604482015260640161066f565b6000610ca0828561177f565b610caa84866117f4565b610cb49190611813565b905060006064610cc58360636117f4565b610ccf9190611813565b905080851015610d215760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161066f565b60075460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b158015610d6d57600080fd5b505af1158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906117bb565b506007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610dda90309033908690600401611797565b602060405180830381600087803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c91906117bb565b506040516832ba3417ba37b5b2b760b91b8152600901604051908190038120600754909133916001600160a01b0316907f7f4e26f91b8d9c589248982d8ebbf07fe7134365f40172240f33d7814c9e9a0990600090a45050505050565b6000610e936107de565b9050478115801590610ea55750600081115b610eeb5760405162461bcd60e51b81526020600482015260176024820152761a5b9d985b1a5919481c995cd95c9d9948185b5bdd5b9d604a1b604482015260640161066f565b6000610ef7838561177f565b610f0183866117f4565b610f0b9190611813565b905060006064610f1c8360636117f4565b610f269190611813565b905080851015610f785760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161066f565b6040516000908190339084908381818185875af1925050503d8060008114610fbc576040519150601f19603f3d011682016040523d82523d6000602084013e610fc1565b606091505b50604051680e8ded6cadc5ecae8d60bb1b81529193509150600901604051908190038120600754909133916001600160a01b0316907f7f4e26f91b8d9c589248982d8ebbf07fe7134365f40172240f33d7814c9e9a0990600090a450505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166110b25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161066f565b6001600160a01b0382166111135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161066f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006111808484611025565b905060001981146111e857818110156111db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161066f565b6111e88484848403611050565b50505050565b6001600160a01b0383166112525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161066f565b6001600160a01b0382166112b45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161066f565b6001600160a01b0383166000908152602081905260409020548181101561132c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161066f565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061136390849061177f565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113af91815260200190565b60405180910390a36111e8565b6001600160a01b0382166114125760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161066f565b8060026000828254611424919061177f565b90915550506001600160a01b0382166000908152602081905260408120805483929061145190849061177f565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166114fb5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161066f565b6001600160a01b0382166000908152602081905260409020548181101561156f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161066f565b6001600160a01b038316600090815260208190526040812083830390556002805484929061159e9084906117dd565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060208083528351808285015260005b81811015611616578581018301518582016040015282016115fa565b81811115611628576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461165557600080fd5b919050565b6000806040838503121561166d57600080fd5b6116768361163e565b946020939093013593505050565b60008060006060848603121561169957600080fd5b6116a28461163e565b92506116b06020850161163e565b9150604084013590509250925092565b6000602082840312156116d257600080fd5b5035919050565b6000602082840312156116eb57600080fd5b6116f48261163e565b9392505050565b6000806040838503121561170e57600080fd5b6117178361163e565b91506117256020840161163e565b90509250929050565b600181811c9082168061174257607f821691505b6020821081141561176357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561179257611792611769565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156117cd57600080fd5b815180151581146116f457600080fd5b6000828210156117ef576117ef611769565b500390565b600081600019048311821515161561180e5761180e611769565b500290565b60008261183057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561184757600080fd5b505191905056fea26469706673582212201d334d9c8ffbc9dc4f7668586be42781044cca39bb14d434560debc40a5fe7c964736f6c63430008080033a2646970667358221220688ce4af41dbf31d784dbec9d3e20638dbe5335c56e8b6b29288cc2ba8f4d98964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061009b5760003560e01c80633d60cebe116100645780633d60cebe1461014e57806361bc221a1461016157806386f79edb146101855780639e8af2af146101a5578063d4117e8d146101b8578063e3433615146101cb57600080fd5b8062a5ae21146100a057806304c55b92146100d05780630b6af776146101065780631269e22f1461011b57806316f0115b1461012e575b600080fd5b6100b36100ae366004610667565b6101de565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100dc57600080fd5b506100b36100eb366004610667565b6001602052600090815260409020546001600160a01b031681565b610119610114366004610680565b610242565b005b610119610129366004610680565b6102c1565b34801561013a57600080fd5b506000546100b3906001600160a01b031681565b61011961015c366004610680565b61030e565b34801561016d57600080fd5b5061017760025481565b6040519081526020016100c7565b34801561019157600080fd5b506101196101a0366004610667565b61035b565b6101196101b3366004610680565b610425565b6100b36101c6366004610667565b6104a9565b6101196101d93660046106ba565b61058e565b6000818152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117835590517fe57fb80e6a08cbced7d99d8f82ae3ee3fee1e5ade0c43ec2de95588b1e3c41fd908390a250506000546001600160a01b031690565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551639c8f9f2360e01b815260048101839052639c8f9f23906024015b600060405180830381600087803b1580156102a557600080fd5b505af11580156102b9573d6000803e3d6000fd5b505050505050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b0390911690811790925551632da618c760e21b81526004810183905263b698631c9060240161028b565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b03909116908117909255516331c8bb3160e21b81526004810183905263c722ecc49060240161028b565b60008181526001602090815260408083205483546001600160a01b0319166001600160a01b0390911690811784558151631e593d9b60e31b81529151909263f2c9ecd8926004808201939182900301818787803b1580156103bb57600080fd5b505af11580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f391906106f3565b60405190915081907f63f5d9c02286e17d00c4feef100edd64e187c62eb3ce9323a27b1e0f1305883c90600090a25050565b6000828152600160205260408082205482546001600160a01b0319166001600160a01b039091169081178355905190917f360500cc0bb9908acbdda3a2865dcefc4ae2dbe309f4fbedf074eb0a9a9a16ac91a26000546040516328e32c8560e11b8152600481018390526001600160a01b03909116906351c6590a9060240161028b565b60008181526001602090815260408083205483546001600160a01b0319166001600160a01b03909116908117845581516338cc483160e01b81529151849391926338cc483192600480830193919282900301818787803b15801561050c57600080fd5b505af1158015610520573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610544919061070c565b6040519091506001600160a01b038216907fe57fb80e6a08cbced7d99d8f82ae3ee3fee1e5ade0c43ec2de95588b1e3c41fd90600090a250506000546001600160a01b0316919050565b6040516001600160a01b038216907fe57fb80e6a08cbced7d99d8f82ae3ee3fee1e5ade0c43ec2de95588b1e3c41fd90600090a281816040516105d09061065a565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610603573d6000803e3d6000fd5b50600080546001600160a01b03929092166001600160a01b03199283168117825560028054835260016020819052604084208054909516909217909355825490929190610651908490610730565b90915550505050565b611aa88061075783390190565b60006020828403121561067957600080fd5b5035919050565b6000806040838503121561069357600080fd5b50508035926020909101359150565b6001600160a01b03811681146106b757600080fd5b50565b600080604083850312156106cd57600080fd5b82356106d8816106a2565b915060208301356106e8816106a2565b809150509250929050565b60006020828403121561070557600080fd5b5051919050565b60006020828403121561071e57600080fd5b8151610729816106a2565b9392505050565b6000821982111561075157634e487b7160e01b600052601160045260246000fd5b50019056fe60806040523480156200001157600080fd5b5060405162001aa838038062001aa883398101604081905262000034916200019f565b604080518082018252600281526104c760f41b60208083019182528351808501909452600784526626282a37b5b2b760c91b9084015281519192916200007d91600391620000dc565b50805162000093906004906020840190620000dc565b5050506001600160a01b038216620000aa57600080fd5b600680546001600160a01b039384166001600160a01b0319918216179091556007805492909316911617905562000214565b828054620000ea90620001d7565b90600052602060002090601f0160209004810192826200010e576000855562000159565b82601f106200012957805160ff191683800117855562000159565b8280016001018555821562000159579182015b82811115620001595782518255916020019190600101906200013c565b50620001679291506200016b565b5090565b5b808211156200016757600081556001016200016c565b80516001600160a01b03811681146200019a57600080fd5b919050565b60008060408385031215620001b357600080fd5b620001be8362000182565b9150620001ce6020840162000182565b90509250929050565b600181811c90821680620001ec57607f821691505b602082108114156200020e57634e487b7160e01b600052602260045260246000fd5b50919050565b61188480620002246000396000f3fe6080604052600436106101405760003560e01c80638a9118c0116100b6578063c722ecc41161006f578063c722ecc414610343578063ce6d41de14610356578063dd62ed3e1461037c578063f2c9ecd81461039c578063f5ae497a146103a4578063f835cd3c146103c457600080fd5b80638a9118c0146102b357806395d89b41146102bb5780639c8f9f23146102d0578063a457c2d7146102f0578063a9059cbb14610310578063b698631c1461033057600080fd5b806338cc48311161010857806338cc4831146101fb578063395093511461022057806351c6590a1461024057806359bf5d39146102555780635fcbd2851461025d57806370a082311461027d57600080fd5b806306fdde0314610145578063095ea7b31461017057806318160ddd146101a057806323b872dd146101bf578063313ce567146101df575b600080fd5b34801561015157600080fd5b5061015a6103e4565b60405161016791906115e9565b60405180910390f35b34801561017c57600080fd5b5061019061018b36600461165a565b610476565b6040519015158152602001610167565b3480156101ac57600080fd5b506002545b604051908152602001610167565b3480156101cb57600080fd5b506101906101da366004611684565b61048e565b3480156101eb57600080fd5b5060405160128152602001610167565b6007546001600160a01b03165b6040516001600160a01b039091168152602001610167565b34801561022c57600080fd5b5061019061023b36600461165a565b6104b2565b61025361024e3660046116c0565b6104d4565b005b6101b16107de565b34801561026957600080fd5b50600554610208906001600160a01b031681565b34801561028957600080fd5b506101b16102983660046116d9565b6001600160a01b031660009081526020819052604090205490565b6101b1610891565b3480156102c757600080fd5b5061015a6108c7565b3480156102dc57600080fd5b506102536102eb3660046116c0565b6108d6565b3480156102fc57600080fd5b5061019061030b36600461165a565b610ba9565b34801561031c57600080fd5b5061019061032b36600461165a565b610c24565b61025361033e3660046116c0565b610c32565b6102536103513660046116c0565b610e89565b60408051808201909152600a81526948656a73616161616e2160b01b602082015261015a565b34801561038857600080fd5b506101b16103973660046116fb565b611025565b6101a46101b1565b3480156103b057600080fd5b50600654610208906001600160a01b031681565b3480156103d057600080fd5b50600754610208906001600160a01b031681565b6060600380546103f39061172e565b80601f016020809104026020016040519081016040528092919081815260200182805461041f9061172e565b801561046c5780601f106104415761010080835404028352916020019161046c565b820191906000526020600020905b81548152906001019060200180831161044f57829003601f168201915b5050505050905090565b600033610484818585611050565b5060019392505050565b60003361049c858285611174565b6104a78585856111ee565b506001949350505050565b6000336104848185856104c58383611025565b6104cf919061177f565b611050565b60006104de6107de565b604051909150479033907f6668ddb75ab5592129a71390d93b9b7bc29f1b921252a127cf5afc9cb55d154690600090a2816105d6576007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061054790339030908890600401611797565b602060405180830381600087803b15801561056157600080fd5b505af1158015610575573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059991906117bb565b506105a433826113bc565b604051339084907f91905d237e50daa4bdca9468a26519d7cd5d0f653a5a9488d96dd6a9e4c6a45c90600090a3505050565b60006105e234476117dd565b90506000816105f185876117f4565b6105fb9190611813565b9050808510156106785760405162461bcd60e51b815260206004820152603c60248201527f6e6f74206163636570746564206c6971756964697479206c657373207468656e60448201527f20746865206d696e696d756d20616d6f756e742061636365707465640000000060648201526084015b60405180910390fd5b6007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906106ac90339030908690600401611797565b602060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe91906117bb565b5060008234600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190611835565b61079391906117f4565b61079d9190611813565b90506107a933826113bc565b604051339087907f91905d237e50daa4bdca9468a26519d7cd5d0f653a5a9488d96dd6a9e4c6a45c90600090a3505050505050565b6007546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190611835565b60405190915081907f9b956f76026ea895b5299c1b06e63f821ebf002029cae37d04b7a953080cbf3690600090a2919050565b604051600090479081907f9b956f76026ea895b5299c1b06e63f821ebf002029cae37d04b7a953080cbf36908490a24791505090565b6060600480546103f39061172e565b600754604080516318160ddd60e01b8152905147926000926001600160a01b03909116916318160ddd91600480820192602092909190829003018186803b15801561092057600080fd5b505afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190611835565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156109a157600080fd5b505afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611835565b90506000826109e886866117f4565b6109f29190611813565b9050600083610a0187856117f4565b610a0b9190611813565b9050610a17338761149b565b60075460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b158015610a6357600080fd5b505af1158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b91906117bb565b506007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610ad090309033908690600401611797565b602060405180830381600087803b158015610aea57600080fd5b505af1158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2291906117bb565b506040516000908190339085908381818185875af1925050503d8060008114610b67576040519150601f19603f3d011682016040523d82523d6000602084013e610b6c565b606091505b506040519193509150339089907f034a5f6e3118da9e19e2e8a906a5e497cb80b6fee61f40df91ca96bfbb71a89b90600090a35050505050505050565b60003381610bb78286611025565b905083811015610c175760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161066f565b6104a78286868403611050565b6000336104848185856111ee565b6000610c3c6107de565b9050478015801590610c4e5750600082115b610c945760405162461bcd60e51b81526020600482015260176024820152761a5b9d985b1a5919481c995cd95c9d9948185b5bdd5b9d604a1b604482015260640161066f565b6000610ca0828561177f565b610caa84866117f4565b610cb49190611813565b905060006064610cc58360636117f4565b610ccf9190611813565b905080851015610d215760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161066f565b60075460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b390604401602060405180830381600087803b158015610d6d57600080fd5b505af1158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906117bb565b506007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610dda90309033908690600401611797565b602060405180830381600087803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c91906117bb565b506040516832ba3417ba37b5b2b760b91b8152600901604051908190038120600754909133916001600160a01b0316907f7f4e26f91b8d9c589248982d8ebbf07fe7134365f40172240f33d7814c9e9a0990600090a45050505050565b6000610e936107de565b9050478115801590610ea55750600081115b610eeb5760405162461bcd60e51b81526020600482015260176024820152761a5b9d985b1a5919481c995cd95c9d9948185b5bdd5b9d604a1b604482015260640161066f565b6000610ef7838561177f565b610f0183866117f4565b610f0b9190611813565b905060006064610f1c8360636117f4565b610f269190611813565b905080851015610f785760405162461bcd60e51b815260206004820152601d60248201527f746f206c6974746c6520616d6f756e7420666f72207377617070696e67000000604482015260640161066f565b6040516000908190339084908381818185875af1925050503d8060008114610fbc576040519150601f19603f3d011682016040523d82523d6000602084013e610fc1565b606091505b50604051680e8ded6cadc5ecae8d60bb1b81529193509150600901604051908190038120600754909133916001600160a01b0316907f7f4e26f91b8d9c589248982d8ebbf07fe7134365f40172240f33d7814c9e9a0990600090a450505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166110b25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161066f565b6001600160a01b0382166111135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161066f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006111808484611025565b905060001981146111e857818110156111db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161066f565b6111e88484848403611050565b50505050565b6001600160a01b0383166112525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161066f565b6001600160a01b0382166112b45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161066f565b6001600160a01b0383166000908152602081905260409020548181101561132c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161066f565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061136390849061177f565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113af91815260200190565b60405180910390a36111e8565b6001600160a01b0382166114125760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161066f565b8060026000828254611424919061177f565b90915550506001600160a01b0382166000908152602081905260408120805483929061145190849061177f565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166114fb5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161066f565b6001600160a01b0382166000908152602081905260409020548181101561156f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161066f565b6001600160a01b038316600090815260208190526040812083830390556002805484929061159e9084906117dd565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060208083528351808285015260005b81811015611616578581018301518582016040015282016115fa565b81811115611628576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461165557600080fd5b919050565b6000806040838503121561166d57600080fd5b6116768361163e565b946020939093013593505050565b60008060006060848603121561169957600080fd5b6116a28461163e565b92506116b06020850161163e565b9150604084013590509250925092565b6000602082840312156116d257600080fd5b5035919050565b6000602082840312156116eb57600080fd5b6116f48261163e565b9392505050565b6000806040838503121561170e57600080fd5b6117178361163e565b91506117256020840161163e565b90509250929050565b600181811c9082168061174257607f821691505b6020821081141561176357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561179257611792611769565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156117cd57600080fd5b815180151581146116f457600080fd5b6000828210156117ef576117ef611769565b500390565b600081600019048311821515161561180e5761180e611769565b500290565b60008261183057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561184757600080fd5b505191905056fea26469706673582212201d334d9c8ffbc9dc4f7668586be42781044cca39bb14d434560debc40a5fe7c964736f6c63430008080033a2646970667358221220688ce4af41dbf31d784dbec9d3e20638dbe5335c56e8b6b29288cc2ba8f4d98964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/DexV3.sol:DexV3",
        "label": "pool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Pool)1510"
      },
      {
        "astId": 738,
        "contract": "contracts/DexV3.sol:DexV3",
        "label": "PoolMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(Pool)1510)"
      },
      {
        "astId": 740,
        "contract": "contracts/DexV3.sol:DexV3",
        "label": "counter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(Pool)1510": {
        "encoding": "inplace",
        "label": "contract Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(Pool)1510)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Pool)",
        "numberOfBytes": "32",
        "value": "t_contract(Pool)1510"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}